generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  phone       String
  image       String
  role        Role         @default(USER)
  blogs       Blog[]
  projects    Project[]
  resumes     Resume[]
  academics   Academic[]
  skills      Skill[]
  experiences Experience[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   Json
  thumbnail String
  views     Int      @default(0)
  tags      String[]
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  thumbnail     String
  features      String[]
  category      String
  frontendTechs String[]
  backendTechs  String[]
  liveUrl       String?
  backendRepo   String?
  frontendRepo  String?
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Resume {
  id        Int      @id @default(autoincrement())
  resumeUrl String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Academic {
  id           Int       @id @default(autoincrement())
  degree       String
  institution  String
  startYear    DateTime
  gradYear     DateTime?
  achievements String[]
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Skill {
  id        Int      @id @default(autoincrement())
  skill     String
  image     String
  expertise String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Experience {
  id              Int       @id @default(autoincrement())
  designation     String
  company         String
  companyLogo     String
  startDate       DateTime
  endDate         DateTime?
  serviceDuration String
  description     String
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum Role {
  ADMIN
  USER
}
